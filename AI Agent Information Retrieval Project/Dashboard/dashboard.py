# -*- coding: utf-8 -*-
"""dashboard.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10NPE16ux4mJG-_OLtgjmNtQ5HC-DApDT
"""

import streamlit as st
import pandas as pd
import os
import time
from dotenv import load_dotenv

# Import functions from other modules
from api_integration.serp_api import fetch_search_results
from utils.data_processing import load_data, process_google_sheet
from utils.error_handling import handle_api_error

# Load environment variables from .env file
load_dotenv()
SERPAPI_KEY = os.getenv("SERPAPI_KEY")

# Streamlit app configuration
st.markdown('<div class="header">ðŸ¤– AI Agent Information Retrieval</div>', unsafe_allow_html=True)
st.markdown('<div class="subheader">Upload your data to begin the journey of extracting valuable insights.</div>', unsafe_allow_html=True)

# File upload or Google Sheets input
uploaded_file = st.file_uploader("Upload a CSV file", type="csv")
google_sheets_url = st.text_input("Or, enter Google Sheets URL (public access)")

# Load data based on file upload or Google Sheets link
data = None
if uploaded_file:
    data = load_data(uploaded_file)
elif google_sheets_url:
    data = process_google_sheet(google_sheets_url)

# Display data preview
if data is not None:
    st.write("### Data Preview")
    st.write(data.head())

    column = st.selectbox("Select the main column for entity search", data.columns)
    query_template = st.text_input("Enter your query template (e.g., 'Find contact info for {company}')")

    if st.button("Run Query"):
        if query_template and column:
            results = []
            for entity in data[column]:
                query = query_template.replace("{company}", entity)
                result = fetch_search_results(query, SERPAPI_KEY)
                if "Error" in result:
                    handle_api_error(result["Error"])
                    results.append({"Entity": entity, "Result": "Error"})
                else:
                    results.append({"Entity": entity, "Result": result["snippet"]})
                time.sleep(1)

            result_df = pd.DataFrame(results)
            st.write("### Query Results")
            st.write(result_df)

            csv = result_df.to_csv(index=False).encode("utf-8")
            st.download_button(label="Download Results as CSV", data=csv, file_name="results.csv", mime="text/csv")
        else:
            st.error("Please enter a query template and select a column.")